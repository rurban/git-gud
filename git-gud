#!/bin/sh

# Validators
validateName() {
  local re="^[A-Z](\.|[[:lower:]]{2,})( [A-Z](\.|[[:lower:]]{2,}))+$"
  [[ "$1" =~ $re ]]
}
validateEmail() {
  local re="^[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[a-z]{2,}$"
  [[ "$1" =~ $re ]]
}
validateSignedOffExists() {
  local re="^Signed-off-by: .*"
  [[ "$1" =~ $re ]]
}
validateSignedOffInformation() {
  local re="^Signed-off-by: $2 <$3>$"
  [[ "$1" =~ $re ]]
}

AUTHOR_NAME=`git log -n 1 --format="%aN"`
GIT_AUTHOR_NAME=`git config user.name`
# Check: Author name must be in a valid format
if validateName "$AUTHOR_NAME"; then
  echo "> OK: Author name format is valid ($AUTHOR_NAME)"
else
  echo "> ERROR: Author name format is not valid ($AUTHOR_NAME)"
fi
# Check: Author name must be the same as config.name
if [ "$GIT_AUTHOR_NAME" != "$AUTHOR_NAME" ]; then
  echo "> WARNING: Author name ($AUTHOR_NAME) is not the same as config ($GIT_AUTHOR_NAME)"
fi

AUTHOR_EMAIL=`git log -n 1 --format="%aE"`
GIT_AUTHOR_EMAIL=`git config user.email`
# Check: Author email must be in a valid format
if validateEmail "$AUTHOR_EMAIL"; then
  echo "> OK: Author email format is valid ($AUTHOR_EMAIL)"
else
  echo "> ERROR: Author email format is not valid ($AUTHOR_EMAIL)"
fi
# Check: Author email must be the same as config.email
if [ "$GIT_AUTHOR_EMAIL" != "$AUTHOR_EMAIL" ]; then
  echo "> WARNING: Author email ($AUTHOR_EMAIL) is not the same as config ($GIT_AUTHOR_EMAIL)"
fi

COMMITER_NAME=`git log -n 1 --format="%cN"`
# Check: Commiter name must be in a valid format
if validateName "$COMMITER_NAME"; then
  echo "> OK: Commiter name format is valid ($COMMITER_NAME)"
else
  echo "> ERROR: Commiter name format is not valid ($COMMITER_NAME)"
fi
# Check: Commiter name must be the same as author
if [ "$COMMITER_NAME" != "$AUTHOR_NAME" ]; then
  echo "> WARNING: Commiter name ($COMMITER_NAME) is not the same as author ($AUTHOR_NAME)"
fi

COMMITER_EMAIL=`git log -n 1 --format="%cE"`
# Check: Commiter email must be in a valid format
if validateEmail "$COMMITER_EMAIL"; then
  echo "> OK: Commiter email format is valid ($COMMITER_EMAIL)"
else
  echo "> ERROR: Commiter email format is not valid ($COMMITER_EMAIL)"
fi
# Check: Commiter email must be the same as author
if [ "$COMMITER_EMAIL" != "$AUTHOR_EMAIL" ]; then
  echo "> WARNING: Commiter email ($COMMITER_EMAIL) is not the same as author ($AUTHOR_EMAIL)"
fi

COMMIT_SUBJECT=`git log -n 1 --format="%s"`
# Check: Subject must use a maximum of 50 characters
if [ ${#COMMIT_SUBJECT} -le 50 ]; then
  echo "> OK: Subject length is correct (${#COMMIT_SUBJECT} <= 50)"
else
  echo "> ERROR: Subject is too long (${#COMMIT_SUBJECT} > 50)"
fi

COMMIT_BODY=`git log -n 1 --format="%b"`
# Check: Body must not be empty
if [ ${#COMMIT_BODY} -ne "0" ]; then
  echo "> OK: Body is not empty (${#COMMIT_BODY} > 0)"
else
  echo "> ERROR: Body is empty (${#COMMIT_BODY} == 0)"
fi
# Check: Body lines must use a maximum of 72 characters
LINES_COUNTER=0
SIGNED_OFF_LINE=""
while read -r COMMIT_BODY; do
  if [ ! -z "$COMMIT_BODY" ]; then
    if [ ${#COMMIT_BODY} -gt 72 ]; then
      echo "> ERROR: Body line is too long (${#COMMIT_BODY} > 72)"
    fi
    if validateSignedOffExists "$COMMIT_BODY"; then
      SIGNED_OFF_LINE=$COMMIT_BODY
    else
      (( LINES_COUNTER++ ))
    fi
  fi
done <<< "$COMMIT_BODY"
# Check: Body must have comments (without consider "Signed-off-by: ...")
if [ "$LINES_COUNTER" -eq "0" ]; then
  echo "> ERROR: Body must include a comment ($LINES_COUNTER == 0)"
else
  echo "> OK: Body includes comment ($LINES_COUNTER > 0)"
fi

# if "Signed-off-by: ..." exists it needs to be valid
if [ ${#SIGNED_OFF_LINE} -ne "0" ]; then
  echo "> OK: 'Signed-off-by' line is not empty (${#SIGNED_OFF_LINE} > 0)"
  # Check: "Signed-off-by: Author Valid Name <author@valid.email>"
  if validateSignedOffInformation "$SIGNED_OFF_LINE" "$AUTHOR_NAME" "$AUTHOR_EMAIL"; then
      echo "> OK: 'Signed-off-by' line has author information"
  else
      echo "> ERROR: 'Signed-off-by' line does not have author information"
  fi
fi

COMMIT_SIGNATURE=`git log -n 1 --format="%G?"`
# Check: Commit must have a good (valid) or no signature
if [ "$COMMIT_SIGNATURE" != "G" -a "$COMMIT_SIGNATURE" != "N" ]; then
  echo "> WARNING: Signature is not valid (Status: $COMMIT_SIGNATURE)"
fi
